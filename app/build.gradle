plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

def localProperties = new Properties()
localProperties.load(new FileInputStream(rootProject.file("local.properties")))

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    def _major = 0
    def _minor = 0
    def _patch = 0
    def _versionCode = 0

    def versionPropsFile = rootProject.file('version.settings')

    if (versionPropsFile.canRead()) {
        def versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        _major = versionProps['MAJOR'].toInteger()
        _minor = versionProps['MINOR'].toInteger()
        _patch = versionProps['PATCH'].toInteger()
        _versionCode = versionProps['VERSION_CODE'].toInteger() + 1

        if (_versionCode == 999) {
            _versionCode = 0
            _patch = _patch + 1
        }

        if (_patch == 99) {
            _patch = 0
            _minor = _minor + 1
        }

        if (_minor == 99) {
            _minor = 0
            _major = _major + 1
        }
        versionProps['MAJOR'] = _major.toString()
        versionProps['MINOR'] = _minor.toString()
        versionProps['PATCH'] = _patch.toString()
        versionProps['VERSION_CODE'] = _versionCode.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    } else {
        throw new GradleException("Could not read version.settings!")
    }
    def _versionName = "${_major}.${_minor}.${_patch}.${_versionCode}"

    defaultConfig {
        applicationId "com.devries48.elitecommander"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode _versionCode
        versionName _versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Get or create frontier client id here: https://user.frontierstore.net
        buildConfigField "String", "FRONTIER_AUTH_CLIENT_ID", "\"${localProperties.getProperty("frontierclientid")}\""
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            multiDexEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.5.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation "androidx.preference:preference-ktx:1.1.1"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0'
    implementation 'org.greenrobot:eventbus:3.2.0'
    implementation 'com.google.code.gson:gson:2.8.6'

    // Firebase
    implementation 'com.google.firebase:firebase-crashlytics-ktx:18.0.0'
    implementation 'com.google.firebase:firebase-analytics:19.0.0'

    // Retrofit
    ext.retrofitVersion = '2.9.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"

    // Log request & response
    implementation('com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.2')

    // Futured donut
    ext.futuredVersion = '2.1.0'
    implementation "app.futured.donut:donut:$futuredVersion"
    implementation "app.futured.donut:donut-compose:$futuredVersion"

    // Unit & instrumented tests
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.7.1')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.7.1')
    testRuntimeOnly('org.junit.vintage:junit-vintage-engine:5.7.1')

    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}